<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="
       http://www.liquibase.org/xml/ns/dbchangelog
       http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <changeSet id="1" author="luigi">

        <!--
        Table: acl_sid
        Columns:
          - id (BIGINT, PK, auto increment) : Unique ID for each security identity
          - principal (BOOLEAN)             : True if SID represents a principal (user), false if it's a granted authority/role
          - sid (VARCHAR(100))              : The username or role name
        -->
        <createTable tableName="acl_sid">
            <column name="id" type="BIGINT" autoIncrement="true">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="principal" type="BOOLEAN"/>
            <column name="sid" type="VARCHAR(100)"/>
        </createTable>

        <!--
        Table: acl_class
        Columns:
          - id (BIGINT, PK, auto increment) : Unique ID for each domain object class
          - class (VARCHAR(255))            : Fully-qualified class name of the domain object
        -->
        <createTable tableName="acl_class">
            <column name="id" type="BIGINT" autoIncrement="true">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="class" type="VARCHAR(255)"/>
            <column name="class_id_type" type="VARCHAR(255)"/>
        </createTable>

        <!--
        Table: acl_object_identity
        Columns:
          - id (BIGINT, PK, auto increment) : Unique ID for the object identity
          - object_id_class (BIGINT)        : Foreign key to acl_class.id
          - object_id_identity (VARCHAR(36)): The identifier of the domain object (often UUID or numeric ID)
          - parent_object (BIGINT)          : Optional FK to another acl_object_identity.id for inheritance
          - owner_sid (BIGINT)              : FK to acl_sid.id indicating the owner
          - entries_inheriting (BOOLEAN)    : Whether this object inherits permissions from its parent
        -->
        <createTable tableName="acl_object_identity">
            <column name="id" type="BIGINT" autoIncrement="true">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="object_id_class" type="BIGINT"/>
            <column name="object_id_identity" type="VARCHAR(36)"/>
            <column name="parent_object" type="BIGINT"/>
            <column name="owner_sid" type="BIGINT"/>
            <column name="entries_inheriting" type="BOOLEAN"/>
        </createTable>

        <!--
        Table: acl_entry
        Columns:
          - id (BIGINT, PK, auto increment) : Unique ID for each access control entry
          - acl_object_identity (BIGINT)    : FK to acl_object_identity.id
          - ace_order (INT)                 : Order of this ACE in the list for the object
          - sid (BIGINT)                     : FK to acl_sid.id for the grantee
          - mask (INTEGER)                   : Bitmask representing permissions
          - granting (BOOLEAN)               : True if granting permission, false if denying
          - audit_success (BOOLEAN)          : Whether to audit successful grants
          - audit_failure (BOOLEAN)          : Whether to audit failed grants
        -->
        <createTable tableName="acl_entry">
            <column name="id" type="BIGINT" autoIncrement="true">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="acl_object_identity" type="BIGINT"/>
            <column name="ace_order" type="INT"/>
            <column name="sid" type="BIGINT"/>
            <column name="mask" type="INTEGER"/>
            <column name="granting" type="BOOLEAN"/>
            <column name="audit_success" type="BOOLEAN"/>
            <column name="audit_failure" type="BOOLEAN"/>
        </createTable>
    </changeSet>

    <changeSet id="2" author="luigi">
        <!--
          acl_sid table after insert (example):

          id   principal   sid
          1    true        admin
          2    true        user1
          3    true        user2
        -->
        <sql>
            INSERT INTO acl_sid (principal, sid)
            SELECT TRUE, name FROM users u
            WHERE NOT EXISTS (
                SELECT 1 FROM acl_sid a WHERE a.sid = u.name
            );
        </sql>
    </changeSet>

    <changeSet id="3" author="luigi">
        <!--
          acl_class table after insert (example):

          id   class                                                  class_id_type
          1    com.example.spring_acl_test.dashboard.Dashboard        com.example.spring_acl_test.dashboard.Dashboard
        -->
        <sql>
            INSERT INTO acl_class (class, class_id_type)
            SELECT 'com.example.spring_acl_test.dashboard.Dashboard', 'java.lang.String'
                WHERE NOT EXISTS (
            SELECT 1 FROM acl_class WHERE class = 'com.example.spring_acl_test.dashboard.Dashboard'
        );
        </sql>
    </changeSet>

    <changeSet id="4" author="luigi">
        <!--
          acl_object_identity table after insert (example):

          id   object_id_class   object_id_identity   owner_sid   entries_inheriting
          1    1                 d1234-5678-...       1           true
          2    1                 e9876-5432-...       1           true
        -->
        <sql>
            INSERT INTO acl_object_identity (object_id_class, object_id_identity, owner_sid, entries_inheriting)
            SELECT
                (SELECT id FROM acl_class WHERE class = 'com.example.spring_acl_test.dashboard.Dashboard'),
                CAST(d.id AS VARCHAR(36)),
                (SELECT id FROM acl_sid WHERE sid = 'admin' AND principal = TRUE),
                TRUE
            FROM dashboards d
            WHERE NOT EXISTS (
                SELECT 1 FROM acl_object_identity oi WHERE oi.object_id_identity = CAST(d.id AS VARCHAR(36))
            );
        </sql>
    </changeSet>

    <changeSet id="5" author="luigi">
        <!-- Insert ACL entries -->

        <!--
          acl_entry table after inserts (example):

          id | acl_object_identity | ace_order | sid | mask | granting | audit_success | audit_failure
          1  | 1                   | 0         | 1   | 31   | true     | false         | false
          2  | 2                   | 0         | 1   | 31   | true     | false         | false
          ... (admin has full access to all dashboards)

          3  | 1                   | 0         | 2   | 1    | true     | false         | false
          (user has read access only on dashboard with object_id_identity = '1')

          where:
            * sid=1 corresponds to 'admin' user in acl_sid
            * sid=2 corresponds to 'user' in acl_sid
            * mask 31 means full permissions (READ, WRITE, CREATE, DELETE, ADMINISTRATION)
            * mask 1 means read-only permission
        -->


        <!--
            admin gets full permissions (mask=31) on all dashboards
        -->
        <sql>
            INSERT INTO acl_entry (acl_object_identity, ace_order, sid, mask, granting, audit_success, audit_failure)
            SELECT
                oi.id,
                0,  -- ace_order (order of this ACE)
                (SELECT id FROM acl_sid WHERE sid = 'admin' AND principal = TRUE),
                31, -- full permissions mask
                TRUE,
                FALSE,
                FALSE
            FROM acl_object_identity oi
            WHERE NOT EXISTS (
                SELECT 1 FROM acl_entry e
                WHERE e.acl_object_identity = oi.id
                  AND e.sid = (SELECT id FROM acl_sid WHERE sid = 'admin' AND principal = TRUE)
            );
        </sql>

        <!--
            user gets READ permission (mask=1) on dashboard with id=1 only
        -->
        <sql>
            INSERT INTO acl_entry (acl_object_identity, ace_order, sid, mask, granting, audit_success, audit_failure)
            SELECT
                oi.id,
                0,
                (SELECT id FROM acl_sid WHERE sid = 'user1' AND principal = TRUE),
                1, -- READ permission
                TRUE,
                FALSE,
                FALSE
            FROM acl_object_identity oi
            WHERE oi.object_id_identity = '550e8400-e29b-41d4-a716-446655450000'
              AND NOT EXISTS (
                SELECT 1 FROM acl_entry e
                WHERE e.acl_object_identity = oi.id
                  AND e.sid = (SELECT id FROM acl_sid WHERE sid = 'user1' AND principal = TRUE)
            );
        </sql>
    </changeSet>

    <changeSet id="6" author="luigi">
        <comment>Create a view acl_class_view that aliases 'class' column as 'class_id_type'</comment>
        <sql>
            CREATE OR REPLACE VIEW acl_class_view AS
            SELECT
                id,
                class AS class_id_type
            FROM acl_class;
        </sql>
    </changeSet>




</databaseChangeLog>
